name: Build Laravel 12 with Tenancy

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout الكود
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup PHP 8.3 + Extensions
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, pdo_mysql, xml, ctype, curl, json, openssl, tokenizer
          coverage: none

      # 3. Cache Composer
      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # 4. Update Dependencies
      - name: Update Dependencies
        run: composer update --no-dev --prefer-dist --optimize-autoloader

      # 5. Copy .env file
      - name: Copy .env
        run: cp .env.example .env

      # 6. Generate Laravel APP_KEY
      - name: Generate Key
        run: php artisan key:generate

      # 7. Publish Tenancy config & migrations
      - name: Publish Tenancy Config
        run: php artisan vendor:publish --tag=tenancy --force

      # 8. Run Laravel Migrations
      - name: Run Laravel Migrations
        run: php artisan migrate --force

      # 9. Optimize Laravel
      - name: Optimize Laravel
        run: php artisan optimize:clear

      # 10. Run Laravel Tests
      - name: Run Tests
        run: php artisan test --env=testing

      # 11. Archive Build
      - name: Create Build Artifact
        run: zip -r build.zip . -x ".git/*" "tests/*" ".github/*" "storage/logs/*"

      # 12. Commit & Push updated files
      - name: Commit generated files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add composer.lock config/ database/migrations/
          git commit -m "chore: update composer.lock, configs, and migrations [skip ci]" || echo "No changes to commit"
          git push origin main

      # 13. Smart Version Bump
      - name: Bump version based on commit message
        id: version
        run: |
          VERSION_FILE=VERSION.txt
          if [ ! -f "$VERSION_FILE" ]; then
            echo "1.0.0" > $VERSION_FILE
          fi

          CURRENT=$(cat $VERSION_FILE)
          MAJOR=$(echo $CURRENT | cut -d. -f1)
          MINOR=$(echo $CURRENT | cut -d. -f2)
          PATCH=$(echo $CURRENT | cut -d. -f3)

          COMMIT_MSG="$(git log -1 --pretty=%B)"

          if echo "$COMMIT_MSG" | grep -iq "major"; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -iq "minor"; then
            MINOR=$((MINOR+1))
            PATCH=0
          else
            PATCH=$((PATCH+1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # تحديث APP_VERSION في .env و .env.example
          sed -i "/^APP_VERSION=/d" .env || true
          echo "APP_VERSION=$NEW_VERSION" >> .env
          sed -i "/^APP_VERSION=/d" .env.example || true
          echo "APP_VERSION=$NEW_VERSION" >> .env.example

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION.txt .env .env.example
          git commit -m "chore: bump version to v$NEW_VERSION and update APP_VERSION [skip ci]" || echo "No changes"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      # 14. Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
